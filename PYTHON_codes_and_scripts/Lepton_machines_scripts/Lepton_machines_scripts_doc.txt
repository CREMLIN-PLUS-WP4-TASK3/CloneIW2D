
NAME
    ALBA_imp

FILE
    ALBA_imp.py

FUNCTIONS

    ALBA_imp(circ=268.0, gamma=5871, avbetax=6.4916999999999998, avbetay=9.1259999999999994, dire='ALBA_lumped/', wake_calc=False, lxplusbatch=None)
        generates impedance model for ALBA ring
        - circ is circumference in m
        - gamma is the relativistic mass factor and circ the total circumference
        - avbetax and avbetay are the average beta functions where to apply kick (must be R/Q for DELPHI computations later)
        - dire is the directory in ImpedanceWake2D where to put the results
        - wake_calc should be True to compute wake as well
        - lxplusbatch: if None, no use of lxplus batch system
                    if 'launch' -> launch calculation on lxplus
                   if 'retrieve' -> retrieve outputs
    


    LEP_conv_2Dplots.py


    LEP_conv.py


FILE
    LEP.py

FUNCTIONS
    LEP_param(E0)
        generates typical LEP parameters at injection, given the electron rest energy 
        E0 in J (from e.g. function proton_param), and generate dipolar impedance (as two
        broad-band resonators). See Karliner-Popov paper (2005).
        Outputs:
        - machine: string with machine name ('VEPP'),
        - E: beam injection energy in eV (22 GeV),
        - gamma: relativistic mass factor,
        - sigmaz: RMS bunch length in m,
        - taub: total bunch length in s (4*RMS),
        - R: machine pysical radius (circumference/(2 pi)),
        - Qx: total horizontal tune (integer + fractional parts),
        - Qxfrac: fractional horizontal tune,
        - Qs: synchrotron tune,
        - eta: slippage factor (alpha_p-1/gamma^2),
        - M: number of bunches (1),
        - f0: revolution frequency,
        - omega0: revolution angular frequency=2pi*f0,
        - omegas: synchrotron angular frequency=Qs*omega0,
        - dphase: phase of damper w.r.t. "normal" purely resistive damper,
        - nx: coupled-bunch mode number (0),
        - R1: shunt impedance of main broad-band resonator (Ohm/m) in the impedance model
        (including beta function weight),
        - Zx: horizontal dipolar impedance (funcion of frequencies),
        - f: frequencies corresponding to impedance,
        - model: name of impedance model.
    

FILE
    TLEP_conv_2Dplots.py

FUNCTIONS
    
    TLEPZ_param(E0, Zoption=0, flagplot=False, flagsave=False)
        old function to generate typical TLEPZ parameters, given the electron rest energy 
        E0 in J (from e.g. function proton_param) and the impedance option Zoption.
        It also generates a dipolar impedance, depending on Zoption:
        - if Zoption=0: total realistic impedance (RF cavities from Rama Calaga files + resistive-wall)
        - if Zoption=1: RF broadband only
        - if Zoption=2: RF from Rama Calaga only
        - if Zoption=3: resistive wall (RW) only
        - if Zoption=4: total impedance (RF+RW) with RF cavities as broad-band
         
        When flagplot=True, some impedance plots are produced, that are automatically
        saved if flagsave=True (otherwise they are plotted on screen).
        
        Outputs:
        - machine: string with machine name ('TLEPZ'),
        - E: beam energy in eV (45.5 GeV),
        - gamma: relativistic mass factor,
        - sigmaz: RMS bunch length in m,
        - taub: total bunch length in s (4*RMS),
        - R: machine pysical radius (circumference/(2 pi)),
        - Qx: total horizontal tune (integer + fractional parts),
        - Qxfrac: fractional horizontal tune,
        - Qs: synchrotron tune,
        - eta: slippage factor (alpha_p-1/gamma^2),
        - M: number of bunches (1),
        - f0: revolution frequency,
        - omega0: revolution angular frequency=2pi*f0,
        - omegas: synchrotron angular frequency=Qs*omega0,
        - dphase: phase of damper w.r.t. "normal" purely resistive damper,
        - nx: coupled-bunch mode number (0),
        - R1: total shunt impedance of broad-band resonator (Ohm/m) used to model RF cavities,
        (including beta function weight),
        - Zx: horizontal dipolar impedance (funcion of frequencies),
        - f: frequencies corresponding to impedance,
        - model: name of impedance model option chosen,
        - syncdamp: synchrotron transverse damping time (transverse=2*longitudinal) in seconds.
    
FILE
    TLEP_imp.py

FUNCTIONS
    
    TLEP_imp(gamma, circ, avbetax, avbetay, length_dip=11.0, length_absorber=0.5, bending_radius=11000, b=0.014999999999999999, dire='TLEP', wake_calc=False, lxplusbatch=None, option='all')
        Generates TLEP impedance and wake model
        all units are SI.
        gamma is the relativistic mass factor and circ the total circumference
        avbetax and avbetay are the average beta functions (where kick will be applied)
        length_dip is the dipole length, length_absorber the photon absorber length, 
        bending_radius the dipoles bending radius, b the vertical semi-axis
        dire is the directory in ImpedanceWake2D where to put the results
        wake_calc should be True to compute wake as well
        lxplusbatch: if None, no use of lxplus batch system
                       if 'launch' -> launch calculation on lxplus
                       if 'retrieve' -> retrieve outputs
        option:
         -'all': compute total impedance
         -'RW': resistive-wall only
         -'RWnoabs' : resistive-wall without absorber part
         -'BB' : total broad-band part
         -'RF': only broad-band from RF
         -'abs': only absorber part (RW+BB from tapers)
    
    TLEP_param(E=45000000000.0, option='Z', Qxfrac=0.20000000000000001, Qyfrac=0.14999999999999999)
        generate typical TLEP parameters, the beam energy E in eV, the TLEP option 
        ('Z', 'H', 'W', 't', 'tB' or 'Z4C') and the fraction parts of the tunes.
        Outputs:
        - machine: string with machine name(here 'TLEP'+option),
        - E: same as input (beam energy in eV),
        - gamma: relativistic mass factor,
        - sigmaz: RMS bunch length in m,
        - taub: total bunch length in s (4*RMS),
        - R: machine pysical radius (circumference/(2 pi)),
        - Qx: total horizontal tune (integer + fractional parts),
        - Qxfrac: fractional horizontal tune,
        - Qy: total vertical tune (integer + fractional parts),
        - Qyfrac: fractional vertical tune,
        - Qs: synchrotron tune,
        - eta: slippage factor (alpha_p-1/gamma^2),
        - f0: revolution frequency,
        - omega0: revolution angular frequency=2pi*f0,
        - omegas: synchrotron angular frequency=Qs*omega0,
        - dphase: phase of damper w.r.t. "normal" purely resistive damper,
        - Estr: string with energy (e.g. '45GeV').
        - syncdamp: synchrotron transverse damping time (transverse=2*longitudinal) in seconds.
    

    TLEP_TMCI_2D_Qscan.py

    TLEP_TMCI_conv.py

    TLEP_TMCI.py

    VEPP_conv.py

FILE
    VEPP.py

FUNCTIONS
    
    VEPP_damper(R, Qx, f0)
        VEPP-4 damper model
        - R: machine (physical) radius, 
        - Qx: total tune (integer+fractional parts),
        - f0: revolution frequency,
        Outputs: "damper impedance" Zd, vs frequencies fd
    
    VEPP_param(E0)
        generates typical VEPP parameters at injection, given the electron rest energy 
        E0 in J (from e.g. function proton_param), and generate dipolar impedance (from
        single broad-band resonator). See Karliner-Popov paper (2005).
        Outputs:
        - machine: string with machine name ('VEPP'),
        - E: beam injection energy in eV (1.8 GeV),
        - gamma: relativistic mass factor,
        - sigmaz: RMS bunch length in m,
        - taub: total bunch length in s (4*RMS),
        - R: machine pysical radius (circumference/(2 pi)),
        - Qx: total horizontal tune (integer + fractional parts),
        - Qxfrac: fractional horizontal tune,
        - Qs: synchrotron tune,
        - eta: slippage factor (alpha_p-1/gamma^2),
        - M: number of bunches (1),
        - f0: revolution frequency,
        - omega0: revolution angular frequency=2pi*f0,
        - omegas: synchrotron angular frequency=Qs*omega0,
        - dphase: phase of damper w.r.t. "normal" purely resistive damper,
        - nx: coupled-bunch mode number (0),
        - R1: shunt impedance of broad-band resonator (Ohm/m) in the impedance model
        (including beta function weight),
        - Zx: horizontal dipolar impedance (funcion of frequencies),
        - f: frequencies corresponding to impedance,
        - model: name of impedance model.
    

