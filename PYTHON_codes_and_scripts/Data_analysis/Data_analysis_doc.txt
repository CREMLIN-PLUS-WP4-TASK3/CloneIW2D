#########################################################################################
#########################################################################################
#											#
#	Some basic info about data analysis scripts					#
#											#
#########################################################################################
#########################################################################################

# To put this folder in your PATH permanently, just type
./script_configure_bashrc.sh

# All the scripts here are meant to be used as command-line scripts, i.e. by typing in a terminal
#something like 
./[script_name].py -a [option_a_arguments] -b [option_b_arguments] [...]
# or, if you have put them in your PATH
[script_name].py -a [option_a_arguments] -b [option_b_arguments] [...]


# An easy way to get help on each script is to type
[script_name].py -h


# There are some examples of command lines in the folder "examples" (but the
# data is not present here).


#####################################
# Short description of each script
# and some command-line examples
#####################################

# most of the scripts are to be used with Timber data (LHC)
# except for the specific PS and PSB scripts (use matlab data in .mat files)

# (note: for the collimator settings scripts, some data is in ../LHC_impedance_and_scripts/Coll_settings/ )


collimator_settings_from_sigma.py

	compute collimator settings (half-gaps) knowing the number of sigmas and all other parameters
	Example:
	collimator_settings_from_sigma.py -e 6500. -r collgaps_fromRoderik_modifNico_materialnames_mm_kept.dat -a 3.5 -s collgaps_settings_sigma_mm_kept_offsetIR3_0sig_retractionIR7_6sig.dat -o coll.txtcoll_settings_find_sigma.py
	

collimator_settings.py

	plot the collimator settings vs. time, and output them at a given time
	
	Example:
	collimator_settings.py -f TIMBER_DATA_coll_B1_20110508105136CET.csv -m -b1 -r ~/Documents/Impedances/LHC/LHC_coll_settings_DWollmann/Alignment_06march2010/coll_settings_B1_450GeV_06032001_forzbase.txt -p T -t 2011 5 8 14 46 0


coll_settings_find_sigma.py

	compute number of sigmas of each collimator, given certain settings and all parameters
	
	Example:
	coll_settings_find_sigma.py -f collgaps_HLLHC_baseline_from_Roderik_modifNico_material_names.dat -x 3.5 -y 3.5 -e 6500 -o collgaps_HLLHC_baseline_from_Roderik_sigma.dat


coll_settings_phase_shift.py

	quick computation (using classic resistive-wall theory) of the longitudinal phase shift due to the power lost
	in the collimators, given their settings
	
	
fastScanToTimberFile.py

	From Xavier BUFFAT
	functions used to read the emittances from BSRT fast scans
	

from_coll_to_tuneshifts_unfinished.py

	UNFINISHED -> not working (attempt to compute simply tunesfhits from collimator settings)
	
	
GateDelayToSlotNumber.py

	From Xavier BUFFAT
	functions used to extract BSRT data
	

multiturndata_riccardodemaria.py

	From R. de Maria
	class to extract ADT and BPM LHC data (multiturn application)

multiturndata_riccardodemaria_modifNico.py

	From R. de Maria (with some minor modifications)
	class to extract ADT and BPM LHC data (multiturn application)


plot_coll_settings.py

	plot collimator settings (bar plots) for different settings files (to compare them)
	

plot_correlations_multibunch.py

	plot correlations between individual bunch properties. Initial multibunch files are from other scripts (read_FBCT.py,
	read_bunchlengths.py, read_BSRT_fastscan.py)
	
	Examples:
	# to plot distributions
	plot_correlations_multibunch.py -x average_BSRT_2012-06-23_18-21-02_2012-06-23_19-05-34_B2H.dat "BSRT hor. emittance [mm.mrad]" -y average_BSRT_2012-06-23_18-21-02_2012-06-23_19-05-34_B2H.dat "Nb bunches" -b 0 0.02 -o distribution_BSRT_histogram_first_instab_B2H --save
	# to plot correlations (here bunch length vs intensity)
	plot_correlations_multibunch.py -y change_bunchlength_B2_first_instab.txt "Change in bunch length [ns]" average_FBCT_B2_before_first_instab.txt -x losses_FBCT_B2_first_instab.txt "Losses [ $ 10^{11} $ p+]" -o correlation_bunchlengths_vs_losses_first_instab --save
	# here plot correlations histogram losses vs cumul. intensity 100 slots
	plot_correlations_multibunch.py -x average_FBCT_B2_cumul_100slots_first_instab.txt "Cumulated intensity over 100 previous slots [ $ 10^{11} $ p+]" -y losses_FBCT_B2_first_instab.txt "Nb bunches losing / nb bunches" -b 0.01 1 0 -o correlation_losses_vs_cumul_intensity_100slots_histogram_norm_first_instab --save


read_ADT_fit.py

	read and fit (exponentially) the raw ADT data
	
	Example:
	read_ADT_fit.py -f "ADT-pickups-Beam2-20-Jun-2012_11-34-23.data" -b 7 -z -1 -e 4000.	


read_ADT_laplace.py
	
	read and analyses with Laplace method (to get complex tuneshifts - does not
	work very well, most often) the ADT data
	
	Example:
	read_ADT_laplace.py -f ADT-pickups-Beam2-21-Apr-2012_12-55-19.data -b 7 -g 1275 -d 1350 -s 20 -z -1
	

read_ADT_postmortem_coupledbunch.py

	read and analyse the coupled-bunch features of the ADT postmortem data. 
	
	Example:
	read_ADT_postmortem_coupledbunch.py -f "ADTDSPUHor*.csv" -f "ADTDSPUVerM1B2_dump2771.csv" -b ../correlations/average_FBCT_B2_before_fourth_instab.txt --save -n -2
	
	
read_ADT_sussix.py
	
	read and analyse with Sussix or FFT on a sliding window the ADT data. 
	
	Example:
	read_ADT_sussix.py -f "ADT-pickups-Beam2-20-Jun-2012_11-34-23.data" -b 7 -g 1279 -z -1 -w 0.01 -e 4000. -n 1870 -t 128 1
	

read_BBQ_B2V_DEV.py
	
	read and perform some analyses on the BBQ B2V "development" data (high bandwidth - see R. Steinhagen et al)
	script largely untested and probably obsolete...

	
read_BBQ_fit.py
	
	read BBQ data, plot and do a raw data exponential fit
	
	Example:
	read_BBQ_fit.py -f TIMBER_DATA_BBQ_MD_octupole_fill3146_20121010092326CET.csv -m -n 2 -b2 -pv -e 4000. -a --save -o '_raw_fit' -r 600 10


read_BBQ_sussix.py
	
	read BBQ data, and do a sliding Sussix or FFT analysis to get spectrogram vs time
	
	Example:
	read_BBQ_sussix.py -f TIMBER_DATA_BBQ_20121128041600CET.csv -m -n 9 -q 0.32 -w 0.001 -t 8192 2 -b2 -pv -e 4000. -x "../Everything_else/TIMBER_DATA_all_3h20_4h40.csv" 'TCP.D6L7' 'TCP D6L7' 'Full gap [mm]' 1 -r -a 100000 -i 0.1 1000000 --save -o '_tuneshift_TCP_ADToff'
	
	
read_BSRT_fastscan.py
	
	read BSRT fast scans
	
	Example:
	read_BSRT_fastscan.py -f "LHC.BSRTS.5L4.B2_2012.06.23_18:[2345]*_fits.dat" -f "LHC.BSRTS.5L4.B2_2012.06.23_19:0[25]*_fits.dat" -b2 -a -r ../FBCT/average_FBCT_2012-06-23_19-04-00_2012-06-23_19-05-00_B2.txt
	

read_bunchlength.py
	
	read and plot bunch lengths, and make some averages
	
	Example:
	read_bunchlength.py -f TIMBER_DATA_bunchlengths_MDoct2_20120623183245CET.csv -b2 -d 2012 6 23 19 4 0 2012 6 23 19 5 0 -a 0 1380
	

read_FBCT.py
	
	read and plot bunch-by-bunch intensities, and make some averages
	
	Examples:
	read_FBCT.py -f TIMBER_DATA_FBCTs_MDoct2_20120623190245CET.csv -b2 -t 2e10 -k -a 0 3564
	read_FBCT.py -f TIMBER_DATA_FBCTs_MDoct2_20120623190245CET.csv -d 2012 6 23 19 4 0 2012 6 23 19 5 0 -b2 -t 2.e10

	
read_LHC_BPM_coupledbunch.py

	read LHC BPM data and do some coupled-bunch analyses
	
	Example:
	read_LHC_BPM_coupledbunch.py -f Beam1@BunchTurn@2011_05_08@12_46_02_633.sdds -r -a -d -q 0.28 0.31 -e 450. -s
	
	
read_LHCDamper_Riccardo.py
	
	read the ADT data from Riccardo de Maria's application
	

read_mat_MD_PSB.py
	
	script used to analyse PSBooster data from .mat files (extracted with G. Sterbini's method)
	

read_mat_MD_PS.py
	
	script used to analyse PS data from .mat files (extracted with G. Sterbini's method)
	

read_Timber_plot.py
	
	script to plot a simple Timber file (with numeric data, not vectornumeric - i.e. a simple one-column array)
	Can plot several data on same plot (even of different natures, with different right and left axes))
	
	Examples:
	# BCT B2 + energy
	read_Timber_plot.py -f TIMBER_DATA_BCT_lumi_betastar_sep_energy_MDoct.csv -l BCTDC.A6R4.B1 -l BCTDC.A6R4.B2 -r ENERGY -g "Beam 1 intensity" -g "Beam 2 intensity" -g "Energy" -y "Intensity [p+/beam]" -y "Energy [GeV]"
	# oct + energy
	read_Timber_plot.py -f TIMBER_DATA_BCT_lumi_betastar_sep_energy_MDoct.csv -f TIMBER_DATA_octupoles_MDoct.csv -l ROF.A81B2 -l ROD.A81B2 -r ENERGY -g "Focusing octupole current" -g "Defocusing octupole current" -g "Energy" -y "Octupole current [A]" -y "Energy [GeV]"
	# oct + BBQ eigenampl
	read_Timber_plot.py -f BBQ/TIMBER_DATA_BBQ_eigenampl_MDoct.csv -f TIMBER_DATA_octupoles_MDoct.csv -l ROF.A81B2 -l ROD.A81B2 -r B2:EIGEN_AMPL_2 -r B2:EIGEN_AMPL_1 -g "Focusing octupole current" -g "Defocusing octupole current" -g "BBQ vertical" -g "BBQ horizontal" -y "Octupole current [A]" -y "BBQ eigen-amplitude [a.u.]"
	# total RF voltage
	read_Timber_plot.py -f TIMBER_DATA_RF_voltage_MDoct.csv -l B1:CAV_FIELD -l B2:CAV_FIELD -a -y "Total RF voltage" -g "Beam 1" -g "Beam 2"


sch_modif.py
	
	From R. Calaga (with minor modifications)
	extract and plot LHC Schottky data
	
	Example:
	sch_modif.py -f TIMBER_DATA_schottky_tune_B1_09042011_7h10_14h40.csv -b1 -p2 -t30 75 -a -c1 10 36 -x0.28 0.01 -y0.31 0.02


script_plot_losses_longrange.py
	
	Losses vs. long-range analysis (LHC)
	This is not a comand-line script with options, rather something to collect several commands in a specific case.
	
	
sddsdata_riccardodemaria.py
	
	From R. de Maria
	Class to extract data on sdds format.
	
