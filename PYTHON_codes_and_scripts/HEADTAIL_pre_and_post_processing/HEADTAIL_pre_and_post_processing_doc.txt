#########################################################################################
#########################################################################################
#											#
#	Some basic info about HEADTAIL pre/post pocressing scripts			#
#											#
#########################################################################################
#########################################################################################

# To put this folder in your PATH and PYTHONPATH permanently, just type
./script_configure_bashrc.sh

# All the scripts here are meant to be used as command-line scripts, i.e. by typing in a terminal
#something like 
./[script_name].py -a [option_a_arguments] -b [option_b_arguments] [...]
# or, if you have put them in your PATH
[script_name].py -a [option_a_arguments] -b [option_b_arguments] [...]


# An easy way to get help on each script is to type
[script_name].py -h


# There are some examples of command lines in the folder "examples" (but the
# simulation data is not present here).


#####################################
# Short description of each script
# and some command-line examples
#####################################


analyse_Headtail_stability.py

	check on _prt.dat files if simulation(s) give(s) instability(ies), or not.
	
	Example:
	analyse_Headtail_stability.py -f "LHC_1b_4TeV_B1_2012_v2_ntwake10_nkick1_nsl200_npr500000_nlin4_csi*_I3_oct-*_drate0p02_pre1_nsig2/LHC*_prt.dat" -r 1.1 -n 500 -o stable_pos_oct_Qsec_d0p02.txt
	
	
construct_bunchtable_from_FBCT.py

	construct a bunch table (.bunch file) for the input of HEADTAIL multibunch, from an
	FBCT file (obtained from read_FBCT.py, see in ../Data_analysis)
	
	Example:
	construct_bunchtable_from_FBCT.py -f ~/Documents/Mesures_LHC/MD_block2_2012/MD_long_imp_20062012/FBCT/int_450GeV_kicks_ADToff/average_FBCT_2012-06-20_07\:51\:00_2012-06-20_07\:55\:00_B2.txt -o bunch_tables/LHC_8bunches_MDlong_20062012_450GeV_B2 -t 0.1


construct_bunchtable_from_scheme.py

	construct a bunch table (.bunch file) for the input of HEADTAIL multibunch, from a
	filling scheme (LHC bucket numbers) or from some info on the bunch train 
		
	Examples:
	construct_bunchtable_from_scheme.py -m -s50 -b36 -o LHC_50ns_1374_1368_0_1262_144bpi12inj_B1 -i6 -f 1   -f 651 -t4 -f4121 -t4 -f7721 -t2 -f9591 -t4 -f13061 -t4 -f16661 -t2 -f18531 -t4 -f22001 -t4 -f 25481 -t2 -f27351 -t4 -f30821 -t4
	construct_bunchtable_from_scheme.py -s25 -b72 -t2 -e30 -t3 -e30 -t4 -e31 -t3 -e30 -t3 -e30 -t4 -e31 -t3 -e30 -t3 -e30 -t4 -e31 -t3 -e30 -t3 -e30 -t4


diff_Headtail.py

	take most of the output files from 2 different HEADTAIL simulations and check how different
	they are between the 2 simulations (in a "brute force" way)
		

diff_tau_tuneshift_Headtail.py
		
	check how different are the rise time and tune shifts from 2 different simulations
	(to be done after read_Headtail_prt_sussix.py for each simulation)
	
	Example:
	diff_tau_tuneshift_Headtail.py -f PS_test_7b_ntwake10_nkick1_nsl200_npr800000/PS_test_800000_prt -f PS_test_7b_ntwake10_nkick1_nsl500_npr2000000/PS_test_2000000_prt -m 0 2


group_files.py (OLD)
		
	group together different files (spanning several parameters)
	in order to plot them easily later.
	assume the columns are all the same in the files
	

group_headtail_files.py
		
	grouping together different growthrate and tuneshift files (spanning several parameters)
	in order to plot them easily later (to be done after read_Headtail_prt_sussix.py
	or read_Headtail_prt_fit.py, with -t option and discarding tune shifts plots in this latter case).
	
	Examples:
	group_headtail_files.py -f "TLEPZ_classicRW_BB_1b_ntwake5_nkick1_nsl500_npr1000000_nlin1_csi0_I*_qsec0_oct0_drate0_all_ldip11m/TLEP_i*_prt.dattau.txt" -o _tau.txt -p I -t
	group_headtail_files.py -f "SPS_2b_ntwake10_nsl[25]0*_npr[14]00000_nlin1_csi*_I1p3_pre1_drate0*/SPS_prt_aver_most_tau.txt" -o _Sussix_aver_most_tau.txt -p csi
	

OLDscript_plot_headtail_tuneshift.py
		
	OBSOLETE
	

plot_tau_tuneshift.py (OLD)
		
	plot for several different simulations the tune shfits and rise times on a single plot
	(to be done after read_Headtail_prt_sussix.py or read_Headtail_prt_fit.py)
	

read_cfg.py
	
	read HEADTAIL input file (.cfg)	and extract main info (used by the other scripts)


read_Headtail_hdtl.py
		
	read and plot hdtl.dat output file (plot of the "traces" over several turns)
	
	Example:
	read_Headtail_hdtl.py -f PS_test_7b_ntwake10_nkick1_nsl50_npr100000/PS_test_100000_hdtl.dat -b 1:7


read_Headtail_prt_coupledbunch.py
		
	read and plot prt.dat file, performing various
	multibunch analyses (SVD, 2D FFT, etc.)
	
	Example:
	read_Headtail_prt_coupledbunch.py -f PS_test_7b_ntwake10_nkick1_nsl500_npr2000000/PS_test_2000000_prt.dat -a -t 50000 100000 -r -s -d


read_Headtail_prt_fit.py
		
	read and plot prt.dat file, performing a simple exponential fit of the raw data
	
	Example:
	read_Headtail_prt_fit.py -f LHC_I0352_Allthemachine_3p5TeV_B1_meas_settings3_4TeV_xiH0V0_BS_prt.dat -b 1 -g 1000 -a -d 5e-5 1e50 -e " $ I=3.5 \times 10^{11} $ , $ Q^'=0 $ , no octupole"


read_Headtail_prt_laplace.py
		
	read and plot prt.dat file, performing a Laplace analysis to get complex tuneshifts of 
	several modes
	
	Example:
	read_Headtail_prt_laplace.py -f "LHC*Allthemachine_450GeV*meas_settings[67]*octm0A*_prt.dat" -f "LHC*Allthemachine_450GeV*meas_settings9*octm0A*_prt.dat"  -b 1 -m 0 0 -n 10 10


read_Headtail_prt.py
		
	read and plot raw data of prt.dat file
	
	Example:
	read_Headtail_prt.py -f "LHC_1b_7TeV_B1_HLLHC_round_Crab_wire_TCT_dip_quad_ntwake10_nkick1_nsl200_npr500000_nlin1_csi0_I*_qsec0_oct0_drate0_pre1_nsig2/LHC_d*_prt.dat" -b 1 -l


read_Headtail_prt_sussix.py
		
	read and plot prt.dat file, performing a sliding Sussix or FFT analysis to get 
	complex tuneshift of the main instability
	
	Example:
	read_Headtail_prt_sussix.py -f "LHC*Allthemachine_450GeV*meas_settings9_TDI_[68]p*octm0A*_prt.dat" -a -b 1 -t 6000 100 -m 0 0


script_plot_tuneshift.py
		
	After having grouped the tuneshift files (with group_headtail_files.py),
	plot together many HEADTAIL simulations
	
	Examples:
	script_plot_tuneshift.py -f "TLEPZ_total_wake_1b_ntwake5_nkick1_nsl500_npr1000000_nlin1_csi0_qsec0_oct0_drate0_all_ldip11m_nt5_Qy*_tau.txt" -p I -x "Intensity $ (10^{10} $ p+/b)"
	script_plot_tuneshift.py -f "LHC_damper_ntwake20_nkick1_nsl50_npr100000_nlin4_I1p7_qsec0_oct0_drate0p02_4TeV_[37]*b*.txt" -f "results_with_100000_turns/LHC_damper_1b_ntwake20_nkick1_nsl50_npr100000_nlin4_I1p7_qsec0_oct0_drate0p02_4TeV_aver_most_morewindows_tau.txt" -p Qp
