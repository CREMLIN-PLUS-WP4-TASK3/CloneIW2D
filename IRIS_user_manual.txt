%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%											  %%
%%  IRIS: Impedance, Resistive-wall & Instability codes and Scripts			  %%
%%  Package of codes to compute multilayer resistive-wall impedances, impedance models,	  %%
%%  and instabilities due to impedance (with or without damper), with example scripts and %%
%%  data for several CERN machines, studies, and others.				  %% 
%%											  %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Author: Nicolas Mounet, CERN BE/ABP/HSC, Geneva

Last modifications: 11/07/2014

Comments / remarks are welcome and can be sent to nicolas.mounet@cern.ch, nicolas.mounet@m4x.org
and/or imp-inst@cern.ch


CONTENTS OF THE MANUAL:

1. INTRODUCTION

2. DESCRIPTION OF THE PACKAGE

3. INSTALLATION

   3.1 Prerequisites
   3.2 Installation
   3.3 How to use the codes

4. FUTURE DEVELOPMENTS (TO-DO LIST)



1. INTRODUCTION
   ============

Instabilites in circular machines (synchrotrons, colliders, accelerators, storage rings, etc.)
due to beam-coupling impedance can be a strong limit to their operation.
This package provides a rather self-consistent set of tools to study beam coupling impedances
and their effects in such rings.
The C++ codes DELPHI, ImpedanceWake2D and Laclare are independent from
each other, but the Python codes are at the end of the chain and use most 
of the C++ codes and external libraries provided here (except Laclare).
 

2. DESCRIPTION OF THE PACKAGE
   ==========================

This repository contains various codes and scripts to compute impedance and instabilities, 
written in PYTHON and C++, in particular:

	- DELPHI: C++ code (stand-alone and shared library) to compute eigenfrequencies 
	(tuneshifts and growth rates) of modes for a coupling-impedance/damper system 
	(Vlasov solver), in mode-coupling regime (azimuthal and radial modes considered)
	

	- ImpedanceWake2D: C++ code (stand-alone and shared library) to compute resistive-wall
	impedance & wake functions of flat or round multilayer infinitely long ("2D") structures,


	- Laclare: C++ code (stand-alone) to compute eigenfrequencies (tuneshifts and growth 
	rates) from a coupling-impedance alone, in weak headtail (low intensity) regime,
	using Laclare formalism (see J. L. Laclare, "Bunched Beam Coherent Instabilities", 
	CERN-87-03-V-1, p. 264, 1987).


	- PYTHON_codes_and_scripts: many Python codes and scripts:
	
		* General_Python_tools: Some general purpose python modules used in many of the functions and 
		scripts here,
		
		* Impedance_lib_Python: Impedance python library: library to compute impedance models, including a 
		wrapper for ImpedanceWake2D,
		
		* DELPHI_Python: DELPHI python library: library to compute instabilities for a 
		coupling-impedance/damper system (wrapper of DELPHI) (also contains a wrapper 
		for the MOSES code of Y. Chin, and several other functions),
		
		* LHC_impedance_and_scripts: LHC & HL-LHC impedance model generation (including data files 
		with parameters and beta functions), and scripts for complex tuneshifts computation,
		
		* HEADTAIL_pre_and_post_processing: HEADTAIL pre and postprocessing scripts (compatible with HEADTAIL 
		multibunch version) ,
		
		* Data_analysis: Data analysis scripts (particularly adapted to LHC Timber data, but also to PS & 
		PSB matlab files obtained in a "Guido Sterbini" way),
		
		* SPS_impedance_and_scripts: SPS impedance models (from Carlo Zannini) and scripts,
		
		* Lepton_machines_scripts: scripts to compute complex tuneshifts, and sometimes impedance models,
		for several lepton machines (LEP, TLEP, VEPP, ALBA - model obtained from E. Koukovini Platia),
		
		* Other_machines_scripts: Other machines scripts (now only VHE-LHC, actually),
		
		* Other_Python_tools: some other python tools,
	

	- External_libs: 
		
		* External python modules (numpy, scipy and matplotlib) in a version compatible with the content of the repository,
		
		* External GMP and MPFR libraries for the ImpedanceWake2D code (used by ALGLIB, see below).
		
		* External ALGLIB library for the ImpedanceWake2D code (C++ library for computations with high precision numbers).


	- SUSSIX: Sussix code (see R. Bartolini - F. Schmidt, CERN SL/Note 98-017 (AP) - 1998)
	for high accuracy spectral analysis, with python wrappers from Rogelio Tomas & Benoit
	Salvant. It is used in particular by the data analysis scripts and the HEADTAIL 
	postprocessing scripts (see above).


	- Getting_LHC_beta_functions: a collection of MAD-X and Matlab® scripts to easily 
	extract (from optics files in the official repositories) and compute beta functions
	for all elements defined in the LHC & HL-LHC impedance models (used to obtain beta 
	functions in files contained in 
	PYTHON_codes_and_scripts/LHC_impedance_and_scripts/LHC_elements).
	There are also functions to get the octupole detuning coefficients (and Q'').


3. INSTALLATION AND USE
   ====================
   
   The package was tested on Linux machines only (lxplus at CERN, in 2014, and 
   Ubuntu 10.04 & 12.04).
   
   For other operating systems, the user is welcome to share his/her installation experience 
   by sending an email to imp-inst@cern.ch
        
   
   3.1 Prerequisites
       -------------
       
       - python 2.6 or 2.7 (other versions - in particular more recent - were not tested).
       - g++ and gcc compilers, with standard C++ libraries. Other compilers have not
       tried, but the user is welcome to share his/her experience with other compilers by sending
       an email to imp-inst@cern.ch
       
	
   3.2 Installation
       -----------
       
       To download toe the CERN GIT repository, install GIT ("sudo apt-get install git-core"
       under Ubuntu) and do
       git clone https://nmounet@git.cern.ch/kerberos/IRIS
       or
       git clone https://nmounet@git.cern.ch/reps/IRIS
       (the former requires MIT Kerberos to be installed, most probably).
       This creates a directory IRIS in the current directory, with the full package in it.
       
       
       Each part of the package has its own installation procedure: 
       
	- DELPHI: follow the instructions in DELPHI/DELPHI_user_manual.txt
		
	- ImpedanceWake2D: follow the instructions in ImpedanceWake2D/IW2D_user_manual.txt

	- Laclare: follow the instructions in Laclare/Laclare_user_manual.txt

	- External_libs: 
		* Python modules (numpy, scipy and matplotlib):
			- they might be needed by the Python programs
			(particularly under lxplus at CERN)
			- in that case, follow the instructions in External_libs/README_install_pymodules.txt
		
		* GMP and MPFR (used by ImpedanceWake2D):
			- see first in ImpedanceWake2D/IW2D_user_manual.txt if they are needed,
			- if they are needed follow the instructions in External_libs/README_compile_GMP_MPFR.txt
		
		* ALGLIB (used by ImpedanceWake2D):
			- install first GMP and MPFR if needed (check in ImpedanceWake2D/IW2D_user_manual.txt)
			- follow the instructions in ImpedanceWake2D/IW2D_user_manual.txt

	- SUSSIX:
		* check that f2py is present in /usr/bin
		If it is not there or if you have troubles, you can try to use
		the one provided with numpy:
			~ install numpy from External_libs (see above)
			~ in SUSSIX/Sussix/Makefile, replace /usr/bin/f2py by
			[numpy_install_directory]/bin/f2py[python_version_number]
			
			where [numpy_install_directory] is the directory where you installed numpy
			(e.g. ../../External_libs/numpy-install)
			and [python_version_number] is your python version number (e.g. 2.6)
		* do:
		cd  SUSSIX/Sussix
		make (* this compiles the fortran SUSSIX code *)
		cd ../
		./script_configure_bashrc.sh (* to add the correct python paths to your .bashrc *)
		chmod +x getTuneSussixNM.py (* to be able to use getTuneSussixNM.py *)


	- PYTHON_codes_and_scripts: 
	
		Generally speaking, you need numpy, scipy and matplotlib (see above if they were not 
		already available on your system).
		
		* General_Python_tools: to be installed first,
			~ if you want to use the Fourier library (fourier_lib.py), you need first to have
			installed ImpedanceWake2D (with its library) (see above)
			DO NOT FORGET TO PUT IN YOUR .bashrc the corresponding LD_LIBRARY_PATH
			(use ../ImpedanceWake2D/script_configure_bashrc.sh)
			
			~ you need to add the path to this directory to your PYTHONPATH. The best
			is do to it in your .bashrc file. For this you can type in a terminal

			    cd PYTHON_codes_and_scripts/General_Python_tools
			    ./script_configure_bashrc.sh
			
		* Impedance_lib_Python: Impedance python library:
			~ you need to have installed ImpedanceWake2D first (see above)
			~ to be able to use the function 'imp_model_from_IW2D' with lxplusbatch='launch' or 'retrieve'
			(i.e. to launch parallel jobs on a cluster - typically lxplus at CERN), you need
			to have the LSF batch system installed (this is the case on lxplus at CERN),
			with typical commands "bsub", "bjobs", etc.
			Otherwise you can still use this routine but sequentially, with lxplusbatch=None.
			~ you need to add the path to this directory to your PYTHONPATH, and define
			the environement variable YOK_PATH for the path to the Yokoya factors file.
			The simplest is to modify your .bashrc file, typing in a terminal
			
			    cd PYTHON_codes_and_scripts/Impedance_lib_Python
			    ./script_configure_bashrc.sh

		* DELPHI_Python: 
			~ you need to have installed DELPHI first (see above)
			~ to be able to use the DELPHI encapsulating functions with lxplusbatch='launch' or 'retrieve'
			(i.e. to launch parallel jobs on a cluster - typically lxplus at CERN), you need
			to have the LSF batch system installed (this is the case on lxplus at CERN),
			with typical commands "bsub", "bjobs", etc.
			Otherwise you can still use these routines but sequentially, with lxplusbatch=None.
			~ you need to add the path to this directory to your PYTHONPATH and to your PATH.
			The simplest is to modify your .bashrc file, typing in a terminal
			
			    cd PYTHON_codes_and_scripts/DELPHI_Python
			    ./script_configure_bashrc.sh

		* LHC_impedance_and_scripts:  
		* HEADTAIL_pre_and_post_processing:
		* Data_analysis:
		* SPS_impedance_and_scripts:
		* Lepton_machines_scripts: 
		* Other_machines_scripts: 
		* Other_Python_tools:
	
		
		Don't forget to reload your bashrc (open a new terminal, or type source ~/.bashrc in the current one).


	- Getting_LHC_beta_functions: nothing to install, but in case one wants to run matlab (*.m)
	files, one needs Matlab® (commercial software, http://www.mathworks.com/products/matlab/)
	while for madx scripts one would need MAD-X (free, http://madx.web.cern.ch/madx/)
       
       
   3.3 How to use the codes
       --------------------
       
       The main codes of the repository are in the subdirectories DELPHI, 
       ImpedanceWake2D, Laclare and in PYTHON_codes_and_scripts.
       
       For the first three (DELPHI, IW2D, Laclare), go in the corresponding subdirectory and follow the user
       manual.
       
       For the Python scripts and programs, each subdirectory of PYTHON_codes_and_scripts
       has a file [subdir_name]_doc.txt with a description of the functions and/or scripts in the
       directory.
       
       For SUSSIX, you can make a test (on the HEADTAIL center of mass output
       "HEADTAIL_test_prt.dat") with the command-line example in 
       "example_getTune.txt".
       
       To get beta functions for the LHC or octupole coefficients, have a look at 
       "Getting_LHC_beta_functions/README.txt". 


4. FUTURE DEVELOPMENTS (TO-DO LIST)
   ================================

- Make nicer (html) user manuals (using sphinx for instance - it should be easy
to change all .txt files into .rst files).
	
