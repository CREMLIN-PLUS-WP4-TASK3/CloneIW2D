%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%											  %%
%%  IRIS: Impedance, Resistive-wall & Instability codes and Scripts			  %%
%%  IW2D package of codes to compute multilayer resistive-wall impedances and wakes%%
%%											  %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Author: Nicolas Mounet, CERN BE/ABP/HSC, Geneva

Last modifications: 19/04/2016 N.Biancacci

Comments / remarks are welcome and can be sent to imp-inst@cern.ch.


CONTENTS OF THE MANUAL:

1. INTRODUCTION

2. DESCRIPTION OF THE PACKAGE

3. INSTALLATION

   3.1 Prerequisites
   3.2 Installation
   3.3 How to use the codes

4. FUTURE DEVELOPMENTS (TO-DO LIST)



1. INTRODUCTION
   ============

Instabilites in circular machines (synchrotrons, colliders, accelerators, storage rings, etc.)
due to beam-coupling impedance can be a strong limit to their operation.
This package provides a tool to study beam coupling impedances and wakefields in 2D flat or cylindrical structures.
 

2. DESCRIPTION OF THE PACKAGE
   ==========================

This repository contains various codes and scripts to compute impedance and instabilities, 
written in PYTHON and C++, in particular:

	- ImpedanceWake2D: C++ code (stand-alone and shared library) to compute resistive-wall
	impedance & wake functions of flat or round multilayer infinitely long ("2D") structures,

	- External_libs: 
		
		* External GMP and MPFR libraries for the ImpedanceWake2D code (used by ALGLIB, see below).
		
		* External ALGLIB library for the ImpedanceWake2D code (C++ library for computations with high precision numbers).


3. INSTALLATION AND USE
   ====================
   
   The package was tested on Linux machines only (lxplus at CERN, in 2014, and 
   Ubuntu 10.04 & 12.04).
   
   For other operating systems, the user is welcome to share his/her installation experience 
   by sending an email to imp-inst@cern.ch
        
   
   3.1 Prerequisites
       -------------
       - To get the latest python libraries (numpy, scipy, matplotlib, etc..), download and install conda from https://www.continuum.io/downloads into your machine. You will also install python 2.6 or 2.7 (other versions - in particular more recent - were not tested).
       - g++ and gcc compilers, with standard C++ libraries. Other compilers have not tried, but the user is welcome to share his/her experience with us.
       
	
   3.2 Installation
       -----------
       
       To download toe the CERN GIT repository, install GIT ("sudo apt-get install git" under Ubuntu) and do
       git clone https://gitlab.cern.ch/IRIS/IW2D.git
       This creates a directory IW2D in the current directory, with the full package in it.
       
       
       NOTE: at several places the 'bash' shell is assumed (in particular all Python scripts use environment variables defined in the ~/.bashrc file). If you are using another shell, then either
        - adapt the installation procedure to use this shell (you need to change only a few 'script_configure_bashrc.sh' files in the various directories),
	- or change to the bash shell each time you use the codes here (typing 'bash' in the terminal),
        - or, for lxplus at CERN you can change your default shell to 'bash' by going to
       	https://account.cern.ch/account/Management/MyAccounts.aspx
	then click on
	Services -> LXPLUS and Linux -> Settings
       
       
       Each part of the package has its own installation procedure: 
       
	- ImpedanceWake2D: follow the instructions in ImpedanceWake2D/IW2D_user_manual.txt

	- External_libs: 
		* GMP and MPFR (used by ImpedanceWake2D):
			- see first in ImpedanceWake2D/IW2D_user_manual.txt if they are needed,
			- if they are needed follow the instructions in External_libs/README_compile_GMP_MPFR.txt
		
		* ALGLIB (used by ImpedanceWake2D):
			- install first GMP and MPFR if needed (check in ImpedanceWake2D/IW2D_user_manual.txt)
			- follow the instructions in ImpedanceWake2D/IW2D_user_manual.txt


	- PYTHON_codes_and_scripts: 
	
		Generally speaking, you need numpy, scipy and matplotlib (see the conda installation procedure in  "Prerequisites" if they were not already available on your system).
		
		* General_Python_tools: to be installed first,
			~ if you want to use the Fourier library (fourier_lib.py), you need first to have
			installed ImpedanceWake2D (with its library) (see above)
			DO NOT FORGET TO PUT IN YOUR .bashrc the corresponding LD_LIBRARY_PATH
			(use ../ImpedanceWake2D/script_configure_bashrc.sh)
			
			~ you need to add the path to this directory to your PYTHONPATH. The best
			is do to it in your .bashrc file. For this you can type in a terminal

			    cd PYTHON_codes_and_scripts/General_Python_tools
			    ./script_configure_bashrc.sh
			
		* Impedance_lib_Python: Impedance python library:
			~ you need to have installed ImpedanceWake2D first, as well as General_Python_tools (see above)
			~ to be able to use the function 'imp_model_from_IW2D' with lxplusbatch='launch' or 'retrieve'
			(i.e. to launch parallel jobs on a cluster - typically lxplus at CERN), you need
			to have the LSF batch system installed (this is the case on lxplus at CERN),
			with typical commands "bsub", "bjobs", etc.
			Otherwise you can still use this routine but sequentially, with lxplusbatch=None.
			~ you need to add the path to this directory to your PYTHONPATH, and define
			the environement variable YOK_PATH for the path to the Yokoya factors file.
			The simplest is to modify your .bashrc file, typing in a terminal
			
			    cd PYTHON_codes_and_scripts/Impedance_lib_Python
			    ./script_configure_bashrc.sh

		
		Don't forget to reload your bashrc (open a new terminal, or type source ~/.bashrc in the current one).


       
   3.3 How to use the codes
       --------------------
       
       The main codes of the repository is in the subdirectory ImpedanceWake2D.
       
       To use the IW2D, go in the corresponding subdirectory and follow the user
       manual.
       
       For the Python scripts and programs, each subdirectory of PYTHON_codes_and_scripts has a file [subdir_name]_doc.txt with a description of the functions and/or scripts in the directory.
       
       To get beta functions for the LHC or octupole coefficients, have a look at 
       "Getting_LHC_beta_functions/README.txt". 


4. FUTURE DEVELOPMENTS (TO-DO LIST)
   ================================

- Consider dispersive materials with arbitrary parameter dependence on frequency (eps_r(f), mu_r(f), sigma_c(f)).
- Make nicer (html) user manuals (using sphinx for instance - it should be easy
to change all .txt files into .rst files).
	
